---
add:
- "  Add file contents to the index"
am:
- "  Apply a series of patches from a"
- "  mailbox"
annotate:
- "  Annotate file lines with commit"
- "  information"
apply:
- "  Apply a patch to files and/or to the"
- "  index"
archimport:
- "  Import a GNU Arch repository into Git"
archive:
- "  Create an archive of files from a"
- "  named tree"
attributes:
- "  Defining attributes per path"
bisect:
- "  Use binary search to find the commit"
- "  that introduced a bug"
blame:
- "  Show what revision and author last"
- "  modified each line of a file"
branch:
- "  List, create, or delete branches"
bugreport:
- "  Collect information for user to file a"
- "  bug report"
bundle:
- "  Move objects and refs by archive"
cat-file:
- "  Provide contents or details of"
- "  repository objects"
check-attr:
- "  Display gitattributes information"
check-ignore:
- "  Debug gitignore / exclude files"
check-mailmap:
- "  Show canonical names and email"
- "  addresses of contacts"
check-ref-format:
- "  Ensures that a reference name is well"
- "  formed"
checkout:
- "  Switch branches or restore working"
- "  tree files"
checkout-index:
- "  Copy files from the index to the"
- "  working tree"
cherry:
- "  Find commits yet to be applied to"
- "  upstream"
cherry-pick:
- "  Apply the changes introduced by some"
- "  existing commits"
citool:
- "  Graphical alternative to git-commit"
clean:
- "  Remove untracked files from the"
- "  working tree"
cli:
- "  Git command-line interface and"
- "  conventions"
clone:
- "  Clone a repository into a new"
- "  directory"
column:
- "  Display data in columns"
commit:
- "  Record changes to the repository"
commit-graph:
- "  Write and verify Git commit-graph"
- "  files"
commit-tree:
- "  Create a new commit object"
config:
- "  Get and set repository or global"
- "  options"
count-objects:
- "  Count unpacked number of objects and"
- "  their disk consumption"
credential:
- "  Retrieve and store user credentials"
credential-cache:
- "  Helper to temporarily store passwords"
- "  in memory"
credential-store:
- "  Helper to store credentials on disk"
cvsexportcommit:
- "  Export a single commit to a CVS"
- "  checkout"
cvsimport:
- "  Salvage your data out of another SCM"
- "  people love to hate"
cvsserver:
- "  A CVS server emulator for Git"
daemon:
- "  A really simple server for Git"
- "  repositories"
describe:
- "  Give an object a human readable name"
- "  based on an available ref"
diagnose:
- "  Generate a zip archive of diagnostic"
- "  information"
diff:
- "  Show changes between commits, commit"
- "  and working tree, etc"
diff-files:
- "  Compares files in the working tree and"
- "  the index"
diff-index:
- "  Compare a tree to the working tree or"
- "  index"
diff-tree:
- "  Compares the content and mode of blobs"
- "  found via two tree objects"
difftool:
- "  Show changes using common diff tools"
fast-export:
- "  Git data exporter"
fast-import:
- "  Backend for fast Git data importers"
fetch:
- "  Download objects and refs from another"
- "  repository"
fetch-pack:
- "  Receive missing objects from another"
- "  repository"
filter-branch:
- "  Rewrite branches"
fmt-merge-msg:
- "  Produce a merge commit message"
for-each-ref:
- "  Output information on each ref"
for-each-repo:
- "  Run a Git command on a list of"
- "  repositories"
format-bundle:
- "  The bundle file format"
format-chunk:
- "  Chunk-based file formats"
format-commit-graph:
- "  Git commit-graph format"
format-index:
- "  Git index format"
format-pack:
- "  Git pack format"
format-patch:
- "  Prepare patches for e-mail submission"
format-signature:
- "  Git cryptographic signature formats"
fsck:
- "  Verifies the connectivity and validity"
- "  of the objects in the database"
gc:
- "  Cleanup unnecessary files and optimize"
- "  the local repository"
get-tar-commit-id:
- "  Extract commit ID from an archive"
- "  created using git-archive"
gitk:
- "  The Git repository browser"
gitweb:
- "  Git web interface (web frontend to Git"
- "  repositories)"
grep:
- "  Print lines matching a pattern"
gui:
- "  A portable graphical interface to Git"
hash-object:
- "  Compute object ID and optionally"
- "  create an object from a file"
help:
- "  Display help information about Git"
hook:
- "  Run git hooks"
hooks:
- "  Hooks used by Git"
http-backend:
- "  Server side implementation of Git over"
- "  HTTP"
ignore:
- "  Specifies intentionally untracked"
- "  files to ignore"
imap-send:
- "  Send a collection of patches from"
- "  stdin to an IMAP folder"
index-pack:
- "  Build pack index file for an existing"
- "  packed archive"
init:
- "  Create an empty Git repository or"
- "  reinitialize an existing one"
instaweb:
- "  Instantly browse your working"
- "  repository in gitweb"
interpret-trailers:
- "  Add or parse structured information in"
- "  commit messages"
log:
- "  Show commit logs"
ls-files:
- "  Show information about files in the"
- "  index and the working tree"
ls-remote:
- "  List references in a remote repository"
ls-tree:
- "  List the contents of a tree object"
mailinfo:
- "  Extracts patch and authorship from a"
- "  single e-mail message"
mailmap:
- "  Map author/committer names and/or"
- "  E-Mail addresses"
mailsplit:
- "  Simple UNIX mbox splitter program"
maintenance:
- "  Run tasks to optimize Git repository"
- "  data"
merge:
- "  Join two or more development histories"
- "  together"
merge-base:
- "  Find as good common ancestors as"
- "  possible for a merge"
merge-file:
- "  Run a three-way file merge"
merge-index:
- "  Run a merge for files needing merging"
merge-one-file:
- "  The standard helper program to use"
- "  with git-merge-index"
merge-tree:
- "  Perform merge without touching index"
- "  or working tree"
mergetool:
- "  Run merge conflict resolution tools to"
- "  resolve merge conflicts"
mktag:
- "  Creates a tag object with extra"
- "  validation"
mktree:
- "  Build a tree-object from ls-tree"
- "  formatted text"
modules:
- "  Defining submodule properties"
multi-pack-index:
- "  Write and verify multi-pack-indexes"
mv:
- "  Move or rename a file, a directory, or"
- "  a symlink"
name-rev:
- "  Find symbolic names for given revs"
notes:
- "  Add or inspect object notes"
pack-objects:
- "  Create a packed archive of objects"
pack-redundant:
- "  Find redundant pack files"
pack-refs:
- "  Pack heads and tags for efficient"
- "  repository access"
patch-id:
- "  Compute unique ID for a patch"
protocol-capabilities:
- "  Protocol v0 and v1 capabilities"
protocol-common:
- "  Things common to various protocols"
protocol-http:
- "  Git HTTP-based protocols"
protocol-pack:
- "  How packs are transferred"
- "  over-the-wire"
prune:
- "  Prune all unreachable objects from the"
- "  object database"
prune-packed:
- "  Remove extra objects that are already"
- "  in pack files"
pull:
- "  Fetch from and integrate with another"
- "  repository or a local branch"
push:
- "  Update remote refs along with"
- "  associated objects"
quiltimport:
- "  Applies a quilt patchset onto the"
- "  current branch"
range-diff:
- "  Compare two commit ranges (e.g. two"
- "  versions of a branch)"
read-tree:
- "  Reads tree information into the index"
rebase:
- "  Reapply commits on top of another base"
- "  tip"
reflog:
- "  Manage reflog information"
remote:
- "  Manage set of tracked repositories"
repack:
- "  Pack unpacked objects in a repository"
replace:
- "  Create, list, delete refs to replace"
- "  objects"
repository-layout:
- "  Git Repository Layout"
request-pull:
- "  Generates a summary of pending changes"
rerere:
- "  Reuse recorded resolution of"
- "  conflicted merges"
reset:
- "  Reset current HEAD to the specified"
- "  state"
restore:
- "  Restore working tree files"
rev-list:
- "  Lists commit objects in reverse"
- "  chronological order"
rev-parse:
- "  Pick out and massage parameters"
revert:
- "  Revert some existing commits"
revisions:
- "  Specifying revisions and ranges for"
- "  Git"
rm:
- "  Remove files from the working tree and"
- "  from the index"
scalar:
- "  A tool for managing large Git"
- "  repositories"
send-email:
- "  Send a collection of patches as emails"
send-pack:
- "  Push objects over Git protocol to"
- "  another repository"
sh-setup:
- "  Common Git shell script setup code"
shortlog:
- "  Summarize 'git log' output"
show:
- "  Show various types of objects"
show-branch:
- "  Show branches and their commits"
show-index:
- "  Show packed archive index"
show-ref:
- "  List references in a local repository"
sparse-checkout:
- "  Reduce your working tree to a subset"
- "  of tracked files"
stash:
- "  Stash the changes in a dirty working"
- "  directory away"
status:
- "  Show the working tree status"
stripspace:
- "  Remove unnecessary whitespace"
submodule:
- "  Initialize, update or inspect"
- "  submodules"
svn:
- "  Bidirectional operation between a"
- "  Subversion repository and Git"
switch:
- "  Switch branches"
symbolic-ref:
- "  Read, modify and delete symbolic refs"
tag:
- "  Create, list, delete or verify a tag"
- "  object signed with GPG"
unpack-file:
- "  Creates a temporary file with a blob's"
- "  contents"
unpack-objects:
- "  Unpack objects from a packed archive"
update-index:
- "  Register file contents in the working"
- "  tree to the index"
update-ref:
- "  Update the object name stored in a ref"
- "  safely"
update-server-info:
- "  Update auxiliary info file to help"
- "  dumb servers"
var:
- "  Show a Git logical variable"
verify-commit:
- "  Check the GPG signature of commits"
verify-pack:
- "  Validate packed Git archive files"
verify-tag:
- "  Check the GPG signature of tags"
version:
- "  Display version information about Git"
whatchanged:
- "  Show logs with differences each commit"
- "  introduces"
worktree:
- "  Manage multiple working trees"
write-tree:
- "  Create a tree object from the current"
- "  index"
